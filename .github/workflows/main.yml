name: build

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  macos-run:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
  
      - name: Install Keystone
        run: |
          brew update
          brew install keystone
  
      - name: Set CGO env
        run: |
          if [ -d "/opt/homebrew/lib" ]; then
            echo "CGO_CFLAGS=-I/opt/homebrew/include" >> $GITHUB_ENV
            echo "CGO_LDFLAGS=-L/opt/homebrew/lib -lkeystone" >> $GITHUB_ENV
          else
            echo "CGO_CFLAGS=-I/usr/local/include" >> $GITHUB_ENV
            echo "CGO_LDFLAGS=-L/usr/local/lib -lkeystone" >> $GITHUB_ENV
          fi
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
  
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21
  
      - name: Make Build
        run: make
  
      - name: Test Run
        run: ./build/sgn --version

  linux-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
  
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake make gcc g++ python3
  
      - name: Install Keystone
        run: |
          git clone --depth=1 https://github.com/keystone-engine/keystone.git
          cd keystone && mkdir build && cd build
          cmake .. && make -j$(nproc) && sudo make install
  
      - name: Configure library path
        run: |
          echo "/usr/local/lib" | sudo tee /etc/ld.so.conf.d/keystone.conf
          sudo ldconfig
          echo "CGO_CFLAGS=-I/usr/local/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L/usr/local/lib -lkeystone" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
  
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21
  
      - name: Build
        run: make
  
      - name: Test binary
        run: ./build/sgn --version

  windows-build:
    runs-on: windows-latest
    steps:
      # 1. Checkout 代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 安装 Visual Studio Build Tools
      - name: Setup Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v1
        with:
          vs-version: 'latest'

      # 3. 安装 CMake
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.26.4'

      # 4. 安装 Python（Keystone 构建可能依赖）
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 5. Clone Keystone 源码
      - name: Clone Keystone
        run: |
          git clone --depth 1 https://github.com/keystone-engine/keystone.git
          cd keystone
          mkdir build

      # 6. Build Keystone DLL using official NMake method
      - name: Build Keystone DLL
        shell: cmd
        run: |
          cd keystone\build
          REM 初始化 Visual Studio 编译环境
          call "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
          REM 构建 DLL
          cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..
          nmake

      # 7. Build Keystone LIB (optional)
      - name: Build Keystone LIB
        shell: cmd
        run: |
          cd keystone\build
          call "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
          cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF ..
          nmake

      # 8. 设置 CGO 环境变量，用于 Go 编译
      - name: Set CGO environment
        shell: bash
        run: |
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$GITHUB_WORKSPACE/keystone/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$GITHUB_WORKSPACE/keystone/build/llvm/lib -lkeystone" >> $GITHUB_ENV

      # 9. 安装 Go
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      # 10. 编译 sgn
      - name: Build sgn
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE
          make

      # 11. 测试运行 sgn
      - name: Test Run
        shell: bash
        run: |
          ./build/sgn.exe --version
